/** Declaration file generated by dts-gen */
import { Service } from 'mdns'

export class Chromecast {
    constructor(service: Service);
    
    isPlaying: boolean
    
    isMuted: boolean
    
    volume: number
    
    refreshedAt: number

    setVolume(opts: { volume: number }): Promise<Chromecast>

    toggleMute(): Promise<Chromecast>

    playPause(): Promise<Chromecast>

    rewind(opts: { time: number }): Promise<Chromecast>

    static refreshStatus(): Promise<Array<Chromecast>>

    static setVolume(args: { volume: number }): Promise<Array<Chromecast>>

    static toggleMute(): Promise<Array<Chromecast>>

    static playPause(): Promise<Array<Chromecast>>

    static rewind(args: { time: number }): Promise<Array<Chromecast>>

    static findAll(where: { [key: string]: any }): Array<Chromecast>;

    static findOne(where: { [key: string]: any }): Array<Chromecast>;

    static getAll(): Array<Chromecast>;

}

export namespace Chromecast {
    class EventEmitter {
        constructor(opts: any);

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static init(opts: any): void;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

}
